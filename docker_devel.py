#!/usr/bin/env python
import optparse
import shutil
import yaml

from common import *

from catkin_pkg.package import InvalidPackage, parse_package_string
from rosdistro import get_cached_distribution, get_index, get_index_url, get_source_file
from rosdistro.dependency_walker import DependencyWalker
from rosdistro.manifest_provider import get_release_tag

from rosdep2.installers import RosdepInstaller

def run_devel_job(ros_distro, repo_list, version_list, workspace,
        platform):
    print "Testing on distro %s" % ros_distro
    print "Testing repositories %s" % ', '.join(repo_list)
    print "Testing versions %s" % ', '.join(version_list)

    # clean up old tmp directory
    shutil.rmtree(os.path.join(workspace, 'tmp'), ignore_errors=True)

    # set directories
    tmpdir = os.path.join('/tmp', 'test_repositories')
    try:
        shutil.rmtree(tmpdir)
    except Exception:
        print "Temp folder did not exist yet"
    repo_sourcespace = os.path.join(tmpdir, 'src_repository')
    repo_path = os.path.join('/tmp', 'src')
    shutil.copytree(repo_path, repo_sourcespace)
    dependson_sourcespace = os.path.join(tmpdir, 'src_depends_on')
    repo_buildspace = os.path.join(tmpdir, 'build_repository')
    dependson_buildspace = os.path.join(tmpdir, 'build_depend_on')

    index = get_index(get_index_url())
    print "Parsing rosdistro file for %s" % ros_distro
    release = get_cached_distribution(index, ros_distro)
    print "Parsing devel file for %s" % ros_distro
    source_file = get_source_file(index, ros_distro)

    # download the repo_list from source
    pkg_names = set([])
    print "Creating rosinstall file for repo list"
    rosinstall = ""
    for repo_name, version in zip(repo_list, version_list):
        repo_path = os.path.join('/tmp', 'src')
        repo_name = os.path.basename(repo_path)
        rosinstall += _generate_rosinstall_for_repo(repo_sourcespace)
    print "rosinstall file for all repositories: \n %s" % rosinstall
    with open(os.path.join(workspace, "repo.rosinstall"), 'w') as f:
        f.write(rosinstall)
    print "Install repo list from source"
    #os.makedirs(repo_sourcespace)
    call("rosinstall %s %s/repo.rosinstall --catkin" % (repo_sourcespace, workspace))

    # replace the CMakeLists.txt file for repositories that use catkin
    print "Removing the CMakeLists.txt file generated by rosinstall"
    os.remove(os.path.join(repo_sourcespace, 'CMakeLists.txt'))
    print "Create a new CMakeLists.txt file using catkin"

    # get environment
    ros_env = get_ros_env('/opt/ros/%s/setup.bash' % ros_distro)

    # check if source workspace contains only package built with catkin
    non_catkin_pkgs = _get_non_catkin_packages(repo_sourcespace)

    # make build folder and change into it
    os.makedirs(repo_buildspace)
    os.chdir(repo_buildspace)

    # make test results dir
    test_results_dir = os.path.join(workspace, 'test_results')
    if os.path.exists(test_results_dir):
        shutil.rmtree(test_results_dir)
    os.makedirs(test_results_dir)

    print "Build catkin workspace"
    call("catkin_init_workspace %s" % repo_sourcespace, ros_env)
    repos_test_results_dir = os.path.join(test_results_dir, 'repos')
    call("cmake %s -DCATKIN_TEST_RESULTS_DIR=%s" % (repo_sourcespace, repos_test_results_dir), ros_env)
    #ros_env_repo = get_ros_env(os.path.join(repo_buildspace, 'devel/setup.bash'))

    # build repositories and tests
    print "Build repo list"
    call("make", ros_env)
    call("make tests", ros_env)

    # get the repositories test and run dependencies
    print "Get test and run dependencies of repo list"
    repo_test_dependencies = get_dependencies(repo_sourcespace, build_depends=False, test_depends=True)
    print "Install test and run dependencies of repo list: %s" % (', '.join(repo_test_dependencies))


def _get_non_catkin_packages(basepath):
    from catkin_pkg.packages import find_packages
    pkgs = []
    packages = find_packages(basepath)
    for pkg in packages.values():
        if _is_non_catkin_package(pkg):
            pkgs.append(pkg.name)
    return pkgs


def _is_non_catkin_package(pkg):
    if 'build_type' in [e.tagname for e in pkg.exports]:
        build_type = [e.content for e in pkg.exports if e.tagname == 'build_type'][0]
        if build_type != 'catkin':
            return True
    return False


def _generate_rosinstall_for_repo(repo_path, version='version', uri=None):
    repo_data = {
        'local-name': repo_path,
    }
    return yaml.safe_dump([{'other': repo_data}], default_style=False)


def main():
    parser = optparse.OptionParser()
    parser.add_option("--workspace", action="store", default=None)
    (options, args) = parser.parse_args()

    if len(args) != 2:
        print "Usage: %s ros_distro repository_name" % sys.argv[0]
        raise BuildException("Wrong number of parameters for devel script")

    ros_distro = args[0]
    repositories = args[1:]
    versions = ['devel' for _ in repositories]

    lsb_info = {}
    with open('/etc/lsb-release') as f:
        for line in f:
            key, value = line.split('=')
            lsb_info[key] = value

    platform = lsb_info['DISTRIB_CODENAME']

    print "Running devel test on distro %s and repositories %s" % (ros_distro, ', '.join(repositories))
    run_devel_job(ros_distro, repositories, versions, options.workspace,
        platform=platform)


if __name__ == '__main__':
    # global try
    try:
        main()
        print "devel script finished cleanly"

    # global catch
    except BuildException as ex:
        print ex.msg

    except Exception as ex:
        print "devel script failed. Check out the console output above for details."
        raise
